// Generated by meta.cpp

#include "editor/asset_browser.h"
#include "gui/gui_system.h"
#include "renderer/editor/scene_view.h"
#include "animation/animation_module.h"
#include "audio/audio_module.h"
#include "engine/core.h"
#include "gui/gui_module.h"
#include "lua/lua_script_system.h"
#include "navigation/navigation_module.h"
#include "physics/physics_module.h"
#include "core/geometry.h"
#include "renderer/model.h"
#include "renderer/render_module.h"
#define XXH_STATIC_LINKING_ONLY
#include "xxhash/xxhash.h"

namespace Lumix {
	int property_animator_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isPropertyAnimatorEnabled(entity)); break;
			case /*looped*/6405259518291244478: LuaWrapper::push(L, module->getPropertyAnimatorLooped(entity)); break;
			case /*animation*/9955584850897845776: LuaWrapper::push(L, module->getPropertyAnimatorAnimation(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int property_animator_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: module->enablePropertyAnimator(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*looped*/6405259518291244478: module->setPropertyAnimatorLooped(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*animation*/9955584850897845776: module->setPropertyAnimatorAnimation(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int Animator_applySet(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		auto idx = LuaWrapper::checkArg<u32>(L, 2);
		module->applyAnimatorSet(entity, idx);
		return 0;
	}
	
	int Animator_setBoolInput(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		auto input_idx = LuaWrapper::checkArg<u32>(L, 2);
		auto value = LuaWrapper::checkArg<bool>(L, 3);
		module->setAnimatorInput(entity, input_idx, value);
		return 0;
	}
	
	int Animator_setFloatInput(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		auto input_idx = LuaWrapper::checkArg<u32>(L, 2);
		auto value = LuaWrapper::checkArg<float>(L, 3);
		module->setAnimatorInput(entity, input_idx, value);
		return 0;
	}
	
	int Animator_setVec3Input(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		auto input_idx = LuaWrapper::checkArg<u32>(L, 2);
		auto value = LuaWrapper::checkArg<Vec3>(L, 3);
		module->setAnimatorInput(entity, input_idx, value);
		return 0;
	}
	
	int Animator_getInputIndex(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		auto name = LuaWrapper::checkArg<const char*>(L, 2);
		LuaWrapper::push(L, 	module->getAnimatorInputIndex(entity, name));
		return 1;
	}
	
	int animator_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*source*/17609862876178282011: LuaWrapper::push(L, module->getAnimatorSource(entity)); break;
			case /*use_root_motion*/7336167410229006784: LuaWrapper::push(L, module->getAnimatorUseRootMotion(entity)); break;
			case /*default_set*/7320943736218812204: LuaWrapper::push(L, module->getAnimatorDefaultSet(entity)); break;
			case /*applySet*/17017936901183810145: lua_pushcfunction(L, Animator_applySet, "Animator_applySet"); break;
			case /*setBoolInput*/6477692741421575490: lua_pushcfunction(L, Animator_setBoolInput, "Animator_setBoolInput"); break;
			case /*setFloatInput*/6071940261820792332: lua_pushcfunction(L, Animator_setFloatInput, "Animator_setFloatInput"); break;
			case /*setVec3Input*/14320350081376399052: lua_pushcfunction(L, Animator_setVec3Input, "Animator_setVec3Input"); break;
			case /*getInputIndex*/6182785171120527074: lua_pushcfunction(L, Animator_getInputIndex, "Animator_getInputIndex"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int animator_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*source*/17609862876178282011: module->setAnimatorSource(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*use_root_motion*/7336167410229006784: module->setAnimatorUseRootMotion(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*default_set*/7320943736218812204: module->setAnimatorDefaultSet(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int animable_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*animation*/9955584850897845776: LuaWrapper::push(L, module->getAnimableAnimation(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int animable_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AnimationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*animation*/9955584850897845776: module->setAnimableAnimation(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int AudioModule_play(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto entity = LuaWrapper::checkArg<EntityRef>(L, 2);
		auto clip = LuaWrapper::checkArg<Path>(L, 3);
		auto is_3d = LuaWrapper::checkArg<bool>(L, 4);
		LuaWrapper::push(L, 	module->play(entity, clip, is_3d));
		return 1;
	}
	
	int AudioModule_setMasterVolume(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto volume = LuaWrapper::checkArg<float>(L, 2);
		module->setMasterVolume(volume);
		return 0;
	}
	
	int AudioModule_stop(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto sound_id = LuaWrapper::checkArg<SoundHandle>(L, 2);
		module->stop(sound_id);
		return 0;
	}
	
	int AudioModule_isEnd(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto sound_id = LuaWrapper::checkArg<SoundHandle>(L, 2);
		LuaWrapper::push(L, 	module->isEnd(sound_id));
		return 1;
	}
	
	int AudioModule_setFrequency(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto sound_id = LuaWrapper::checkArg<SoundHandle>(L, 2);
		auto frequency_hz = LuaWrapper::checkArg<u32>(L, 3);
		module->setFrequency(sound_id, frequency_hz);
		return 0;
	}
	
	int AudioModule_setVolume(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto sound_id = LuaWrapper::checkArg<SoundHandle>(L, 2);
		auto volume = LuaWrapper::checkArg<float>(L, 3);
		module->setVolume(sound_id, volume);
		return 0;
	}
	
	int AudioModule_setEcho(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		AudioModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto sound_id = LuaWrapper::checkArg<SoundHandle>(L, 2);
		auto wet_dry_mix = LuaWrapper::checkArg<float>(L, 3);
		auto feedback = LuaWrapper::checkArg<float>(L, 4);
		auto left_delay = LuaWrapper::checkArg<float>(L, 5);
		auto right_delay = LuaWrapper::checkArg<float>(L, 6);
		module->setEcho(sound_id, wet_dry_mix, feedback, left_delay, right_delay);
		return 0;
	}
	
	int echo_zone_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getEchoZone(entity).radius); break;
			case /*delay*/13078273434447554266: LuaWrapper::push(L, module->getEchoZone(entity).delay); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int echo_zone_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: module->getEchoZone(entity).radius = LuaWrapper::checkArg<float>(L, 3); break;
			case /*delay*/13078273434447554266: module->getEchoZone(entity).delay = LuaWrapper::checkArg<float>(L, 3); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int chorus_zone_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getChorusZone(entity).radius); break;
			case /*delay*/13078273434447554266: LuaWrapper::push(L, module->getChorusZone(entity).delay); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int chorus_zone_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: module->getChorusZone(entity).radius = LuaWrapper::checkArg<float>(L, 3); break;
			case /*delay*/13078273434447554266: module->getChorusZone(entity).delay = LuaWrapper::checkArg<float>(L, 3); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int audio_listener_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int audio_listener_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int AmbientSound_pause(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		module->pauseAmbientSound(entity);
		return 0;
	}
	
	int AmbientSound_resume(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		module->resumeAmbientSound(entity);
		return 0;
	}
	
	int ambient_sound_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*clip*/13569199342746918467: LuaWrapper::push(L, module->getAmbientSoundClip(entity)); break;
			case /*is_3d*/7401995853317604073: LuaWrapper::push(L, module->isAmbientSound3D(entity)); break;
			case /*pause*/3701802990388885733: lua_pushcfunction(L, AmbientSound_pause, "AmbientSound_pause"); break;
			case /*resume*/3192798007053220969: lua_pushcfunction(L, AmbientSound_resume, "AmbientSound_resume"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int ambient_sound_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (AudioModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*clip*/13569199342746918467: module->setAmbientSoundClip(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*is_3d*/7401995853317604073: module->setAmbientSound3D(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int spline_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (CoreModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int spline_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (CoreModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int signal_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (CoreModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int signal_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (CoreModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int GUIModule_getRectAt(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		GUIModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto pos = LuaWrapper::checkArg<Vec2>(L, 2);
		LuaWrapper::push(L, 	module->getRectAt(pos));
		return 1;
	}
	
	int GUIModule_isOver(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		GUIModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto pos = LuaWrapper::checkArg<Vec2>(L, 2);
		auto e = LuaWrapper::checkArg<EntityRef>(L, 3);
		LuaWrapper::push(L, 	module->isOver(pos, e));
		return 1;
	}
	
	int GUIModule_getSystemPtr(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		GUIModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		LuaWrapper::pushObject(L, 	module->getSystemPtr(), "GUISystem");
		return 1;
	}
	
	int gui_canvas_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*is_3d*/7401995853317604073: LuaWrapper::push(L, module->getCanvas(entity).is_3d); break;
			case /*orient_to_camera*/8367939065059955720: LuaWrapper::push(L, module->getCanvas(entity).orient_to_camera); break;
			case /*virtual_size*/10008642934015139818: LuaWrapper::push(L, module->getCanvas(entity).virtual_size); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_canvas_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*is_3d*/7401995853317604073: module->getCanvas(entity).is_3d = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*orient_to_camera*/8367939065059955720: module->getCanvas(entity).orient_to_camera = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*virtual_size*/10008642934015139818: module->getCanvas(entity).virtual_size = LuaWrapper::checkArg<Vec2>(L, 3); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_render_target_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_render_target_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_input_field_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_input_field_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_rect_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isRectEnabled(entity)); break;
			case /*clip_content*/17423615441029062858: LuaWrapper::push(L, module->getRectClip(entity)); break;
			case /*left_points*/18280568557834126485: LuaWrapper::push(L, module->getRectLeftPoints(entity)); break;
			case /*left_relative*/3342820717099768220: LuaWrapper::push(L, module->getRectLeftRelative(entity)); break;
			case /*right_points*/361145705378812951: LuaWrapper::push(L, module->getRectRightPoints(entity)); break;
			case /*right_relative*/17276897033765672782: LuaWrapper::push(L, module->getRectRightRelative(entity)); break;
			case /*top_points*/10091190592692352298: LuaWrapper::push(L, module->getRectTopPoints(entity)); break;
			case /*top_relative*/10464521780222816712: LuaWrapper::push(L, module->getRectTopRelative(entity)); break;
			case /*bottom_points*/3712023579548425612: LuaWrapper::push(L, module->getRectBottomPoints(entity)); break;
			case /*bottom_relative*/7595909218576582928: LuaWrapper::push(L, module->getRectBottomRelative(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_rect_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: module->enableRect(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*clip_content*/17423615441029062858: module->setRectClip(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*left_points*/18280568557834126485: module->setRectLeftPoints(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*left_relative*/3342820717099768220: module->setRectLeftRelative(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*right_points*/361145705378812951: module->setRectRightPoints(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*right_relative*/17276897033765672782: module->setRectRightRelative(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*top_points*/10091190592692352298: module->setRectTopPoints(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*top_relative*/10464521780222816712: module->setRectTopRelative(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*bottom_points*/3712023579548425612: module->setRectBottomPoints(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*bottom_relative*/7595909218576582928: module->setRectBottomRelative(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_button_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*hovered_color*/1007138839029607122: LuaWrapper::push(L, module->getButtonHoveredColorRGBA(entity)); break;
			case /*hovered_cursor*/18068079505236550740: LuaWrapper::push(L, (i32)module->getButtonHoveredCursor(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_button_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*hovered_color*/1007138839029607122: module->setButtonHoveredColorRGBA(entity, LuaWrapper::checkArg<Vec4>(L, 3)); break;
			case /*hovered_cursor*/18068079505236550740: module->setButtonHoveredCursor(entity, (os::CursorType)LuaWrapper::checkArg<i32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_image_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isImageEnabled(entity)); break;
			case /*color*/880366885425937065: LuaWrapper::push(L, module->getImageColorRGBA(entity)); break;
			case /*sprite*/11899351776270312423: LuaWrapper::push(L, module->getImageSprite(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_image_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: module->enableImage(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*color*/880366885425937065: module->setImageColorRGBA(entity, LuaWrapper::checkArg<Vec4>(L, 3)); break;
			case /*sprite*/11899351776270312423: module->setImageSprite(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int gui_text_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*font_size*/13102103059382391709: LuaWrapper::push(L, module->getTextFontSize(entity)); break;
			case /*color*/880366885425937065: LuaWrapper::push(L, module->getTextColorRGBA(entity)); break;
			case /*font*/12608998532173430232: LuaWrapper::push(L, module->getTextFontPath(entity)); break;
			case /*horizontal_align*/17425989282954003833: LuaWrapper::push(L, (i32)module->getTextHAlign(entity)); break;
			case /*vertical_align*/6391177055909864478: LuaWrapper::push(L, (i32)module->getTextVAlign(entity)); break;
			case /*text*/5145922347574273553: LuaWrapper::push(L, module->getText(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int gui_text_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (GUIModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*font_size*/13102103059382391709: module->setTextFontSize(entity, LuaWrapper::checkArg<int>(L, 3)); break;
			case /*color*/880366885425937065: module->setTextColorRGBA(entity, LuaWrapper::checkArg<Vec4>(L, 3)); break;
			case /*font*/12608998532173430232: module->setTextFontPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*horizontal_align*/17425989282954003833: module->setTextHAlign(entity, (TextHAlign)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*vertical_align*/6391177055909864478: module->setTextVAlign(entity, (TextVAlign)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*text*/5145922347574273553: module->setText(entity, LuaWrapper::checkArg<const char*>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int lua_script_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (LuaScriptModule*)imodule;
		if (lua_isnumber(L, 2)) return lua_push_script_env(L, entity, module);
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*scripts*/8216748883816048291: {
				using GetterModule = LuaScriptModule;
				auto getter = [](lua_State* L) ->int {
					LuaWrapper::checkTableArg(L, 1); // self
					auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
					EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
					if (lua_type(L, 2) == LUA_TSTRING) {
						auto adder = [](lua_State* L) -> int  {
							auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
							EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
							module->addScript(entity, module->getScriptCount(entity));
							return 0;
						};
						
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						if (equalStrings(prop_name, "add")) {
							LuaWrapper::push(L, module);
							LuaWrapper::push(L, entity.index);
							lua_pushcclosure(L, adder, "adder", 2);
							return 1;
						}
						else {
							ASSERT(false);
							luaL_error(L, "Unknown property %s", prop_name);
						}
					}
					
					auto getter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						switch (name_hash) {
							case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isScriptEnabled(entity, index)); break;
							case /*path*/8756705481922369689: LuaWrapper::push(L, module->getScriptPath(entity, index)); break;
							default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
						}
						return 1;
					};
					
					auto setter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						switch (name_hash) {
							case /*enabled*/13840943435668507618: module->enableScript(entity, index, LuaWrapper::checkArg<bool>(L, 3)); break;
							case /*path*/8756705481922369689: module->setScriptPath(entity, index, LuaWrapper::checkArg<Path>(L, 3)); break;
							
							case 0:	
							default: { ASSERT(false); luaL_error(L, "Unknown property %ss", prop_name); break; }
						}
						return 0;
					};
					
					i32 index = LuaWrapper::checkArg<i32>(L, 2) - 1;
					i32 num_elements = module->getScriptCount(entity);
					if (index >= num_elements) {
						lua_pushnil(L);
						return 1;
					}
					
					lua_newtable(L);
					lua_newtable(L);
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, getter, "getter", 3);
					lua_setfield(L, -2, "__index");
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, setter, "setter", 3);
					lua_setfield(L, -2, "__newindex");
					
					lua_setmetatable(L, -2);
					return 1;
				};
				
				lua_newtable(L); // {}
				lua_newtable(L); // {}, metatable
				LuaWrapper::push(L, module);
				LuaWrapper::push(L, entity.index);
				lua_pushcclosure(L, getter, "getter", 2);
				lua_setfield(L, -2, "__index"); // {}, mt
				lua_setmetatable(L, -2); // {}
				break;
			}
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int lua_script_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (LuaScriptModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int lua_script_inline_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (LuaScriptModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*code*/329780482934683790: LuaWrapper::push(L, module->getInlineScriptCode(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int lua_script_inline_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (LuaScriptModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*code*/329780482934683790: module->setInlineScriptCode(entity, LuaWrapper::checkArg<const char*>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int Zone_load(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		LuaWrapper::push(L, 	module->loadZone(entity));
		return 1;
	}
	
	int Zone_drawNavmesh(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		auto pos = LuaWrapper::checkArg<DVec3>(L, 2);
		auto inner_boundaries = LuaWrapper::checkArg<bool>(L, 3);
		auto outer_boundaries = LuaWrapper::checkArg<bool>(L, 4);
		auto portals = LuaWrapper::checkArg<bool>(L, 5);
		module->debugDrawNavmesh(entity, pos, inner_boundaries, outer_boundaries, portals);
		return 0;
	}
	
	int Zone_drawCompactHeightfield(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		module->debugDrawCompactHeightfield(entity);
		return 0;
	}
	
	int Zone_drawHeightfield(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		module->debugDrawHeightfield(entity);
		return 0;
	}
	
	int Zone_drawContours(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		module->debugDrawContours(entity);
		return 0;
	}
	
	int Zone_generateNavmesh(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		LuaWrapper::push(L, 	module->generateNavmesh(entity));
		return 1;
	}
	
	int Zone_saveZone(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		LuaWrapper::push(L, 	module->saveZone(entity));
		return 1;
	}
	
	int navmesh_zone_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*extents*/16706040244383067120: LuaWrapper::push(L, module->getZone(entity).extents); break;
			case /*cell_size*/11901102814051950809: LuaWrapper::push(L, module->getZone(entity).cell_size); break;
			case /*cell_height*/2785194655892297410: LuaWrapper::push(L, module->getZone(entity).cell_height); break;
			case /*walkable_slope_angle*/5877966073471669844: LuaWrapper::push(L, module->getZone(entity).walkable_slope_angle); break;
			case /*agent_height*/7720528739237521768: LuaWrapper::push(L, module->getZone(entity).agent_height); break;
			case /*agent_radius*/12560806752221720165: LuaWrapper::push(L, module->getZone(entity).agent_radius); break;
			case /*max_climb*/18440467892564879558: LuaWrapper::push(L, module->getZone(entity).max_climb); break;
			case /*autoload*/12820653450790247776: LuaWrapper::push(L, module->getZoneAutoload(entity)); break;
			case /*detailed*/3305050883106733620: LuaWrapper::push(L, module->getZoneDetailed(entity)); break;
			case /*load*/15165270708108832870: lua_pushcfunction(L, Zone_load, "Zone_load"); break;
			case /*drawNavmesh*/2652037676279031843: lua_pushcfunction(L, Zone_drawNavmesh, "Zone_drawNavmesh"); break;
			case /*drawCompactHeightfield*/13172685102570950854: lua_pushcfunction(L, Zone_drawCompactHeightfield, "Zone_drawCompactHeightfield"); break;
			case /*drawHeightfield*/16614662065599330693: lua_pushcfunction(L, Zone_drawHeightfield, "Zone_drawHeightfield"); break;
			case /*drawContours*/13346899911515510418: lua_pushcfunction(L, Zone_drawContours, "Zone_drawContours"); break;
			case /*generateNavmesh*/17733766460475722627: lua_pushcfunction(L, Zone_generateNavmesh, "Zone_generateNavmesh"); break;
			case /*saveZone*/7775591933563895126: lua_pushcfunction(L, Zone_saveZone, "Zone_saveZone"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int navmesh_zone_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*extents*/16706040244383067120: module->getZone(entity).extents = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*cell_size*/11901102814051950809: module->getZone(entity).cell_size = LuaWrapper::checkArg<float>(L, 3); break;
			case /*cell_height*/2785194655892297410: module->getZone(entity).cell_height = LuaWrapper::checkArg<float>(L, 3); break;
			case /*walkable_slope_angle*/5877966073471669844: module->getZone(entity).walkable_slope_angle = LuaWrapper::checkArg<float>(L, 3); break;
			case /*agent_height*/7720528739237521768: module->getZone(entity).agent_height = LuaWrapper::checkArg<float>(L, 3); break;
			case /*agent_radius*/12560806752221720165: module->getZone(entity).agent_radius = LuaWrapper::checkArg<float>(L, 3); break;
			case /*max_climb*/18440467892564879558: module->getZone(entity).max_climb = LuaWrapper::checkArg<float>(L, 3); break;
			case /*autoload*/12820653450790247776: module->setZoneAutoload(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*detailed*/3305050883106733620: module->setZoneDetailed(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int Agent_navigate(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		auto dest = LuaWrapper::checkArg<DVec3>(L, 2);
		auto speed = LuaWrapper::checkArg<float>(L, 3);
		auto stop_distance = LuaWrapper::checkArg<float>(L, 4);
		LuaWrapper::push(L, 	module->navigate(entity, dest, speed, stop_distance));
		return 1;
	}
	
	int Agent_cancelNavigation(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		module->cancelNavigation(entity);
		return 0;
	}
	
	int Agent_drawPath(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		auto include_polygons = LuaWrapper::checkArg<bool>(L, 2);
		module->debugDrawPath(entity, include_polygons);
		return 0;
	}
	
	int navmesh_agent_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getAgentRadius(entity)); break;
			case /*height*/3439375685700528633: LuaWrapper::push(L, module->getAgentHeight(entity)); break;
			case /*move_entity*/3203804519501376147: LuaWrapper::push(L, module->getAgentMoveEntity(entity)); break;
			case /*speed*/5411191639289302350: LuaWrapper::push(L, module->getAgentSpeed(entity)); break;
			case /*navigate*/10641905485202240135: lua_pushcfunction(L, Agent_navigate, "Agent_navigate"); break;
			case /*cancelNavigation*/10369242840717673752: lua_pushcfunction(L, Agent_cancelNavigation, "Agent_cancelNavigation"); break;
			case /*drawPath*/15681074705421253585: lua_pushcfunction(L, Agent_drawPath, "Agent_drawPath"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int navmesh_agent_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (NavigationModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*radius*/3015162214864260720: module->setAgentRadius(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*height*/3439375685700528633: module->setAgentHeight(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*move_entity*/3203804519501376147: module->setAgentMoveEntity(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int PhysicsModule_raycast(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		PhysicsModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto origin = LuaWrapper::checkArg<Vec3>(L, 2);
		auto dir = LuaWrapper::checkArg<Vec3>(L, 3);
		auto distance = LuaWrapper::checkArg<float>(L, 4);
		auto ignore_entity = LuaWrapper::checkArg<EntityPtr>(L, 5);
		LuaWrapper::push(L, 	module->raycast(origin, dir, distance, ignore_entity));
		return 1;
	}
	
	int PhysicsModule_setGravity(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		PhysicsModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto gravity = LuaWrapper::checkArg<Vec3>(L, 2);
		module->setGravity(gravity);
		return 0;
	}
	
	int physical_heightfield_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*heightmap*/3791305379450315311: LuaWrapper::push(L, module->getHeightfieldSource(entity)); break;
			case /*xz_scale*/2710990129242626426: LuaWrapper::push(L, module->getHeightfieldXZScale(entity)); break;
			case /*yscale*/9502059661590009697: LuaWrapper::push(L, module->getHeightfieldYScale(entity)); break;
			case /*layer*/12438280802495919435: LuaWrapper::push(L, module->getHeightfieldLayer(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int physical_heightfield_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*heightmap*/3791305379450315311: module->setHeightfieldSource(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*xz_scale*/2710990129242626426: module->setHeightfieldXZScale(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*yscale*/9502059661590009697: module->setHeightfieldYScale(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*layer*/12438280802495919435: module->setHeightfieldLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int d6_joint_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*xmotion*/12924897109804636052: LuaWrapper::push(L, (i32)module->getD6JointXMotion(entity)); break;
			case /*ymotion*/2892853640672813625: LuaWrapper::push(L, (i32)module->getD6JointYMotion(entity)); break;
			case /*zmotion*/14326776324177495099: LuaWrapper::push(L, (i32)module->getD6JointZMotion(entity)); break;
			case /*swing_1*/6942080154291173092: LuaWrapper::push(L, (i32)module->getD6JointSwing1Motion(entity)); break;
			case /*swing_2*/11007790430520567152: LuaWrapper::push(L, (i32)module->getD6JointSwing2Motion(entity)); break;
			case /*twist*/16879827851491555907: LuaWrapper::push(L, (i32)module->getD6JointTwistMotion(entity)); break;
			case /*linear_limit*/7071186415882516621: LuaWrapper::push(L, module->getD6JointLinearLimit(entity)); break;
			case /*twist_limit*/7697188143647272575: LuaWrapper::push(L, module->getD6JointTwistLimit(entity)); break;
			case /*swing_limit*/15428345689627384487: LuaWrapper::push(L, module->getD6JointSwingLimit(entity)); break;
			case /*damping*/8331910337638582270: LuaWrapper::push(L, module->getD6JointDamping(entity)); break;
			case /*stiffness*/553508148491954027: LuaWrapper::push(L, module->getD6JointStiffness(entity)); break;
			case /*restitution*/16970443376847887964: LuaWrapper::push(L, module->getD6JointRestitution(entity)); break;
			case /*connected_body*/16103897983733153436: LuaWrapper::push(L, module->getD6JointConnectedBody(entity)); break;
			case /*axis_position*/2173619491007772698: LuaWrapper::push(L, module->getD6JointAxisPosition(entity)); break;
			case /*axis_direction*/16325623039774346822: LuaWrapper::push(L, module->getD6JointAxisDirection(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int d6_joint_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*xmotion*/12924897109804636052: module->setD6JointXMotion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*ymotion*/2892853640672813625: module->setD6JointYMotion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*zmotion*/14326776324177495099: module->setD6JointZMotion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*swing_1*/6942080154291173092: module->setD6JointSwing1Motion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*swing_2*/11007790430520567152: module->setD6JointSwing2Motion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*twist*/16879827851491555907: module->setD6JointTwistMotion(entity, (PhysicsModule::D6Motion)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*linear_limit*/7071186415882516621: module->setD6JointLinearLimit(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*twist_limit*/7697188143647272575: module->setD6JointTwistLimit(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case /*swing_limit*/15428345689627384487: module->setD6JointSwingLimit(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case /*damping*/8331910337638582270: module->setD6JointDamping(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*stiffness*/553508148491954027: module->setD6JointStiffness(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*restitution*/16970443376847887964: module->setD6JointRestitution(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*connected_body*/16103897983733153436: module->setD6JointConnectedBody(entity, LuaWrapper::checkArg<EntityPtr>(L, 3)); break;
			case /*axis_position*/2173619491007772698: module->setD6JointAxisPosition(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*axis_direction*/16325623039774346822: module->setD6JointAxisDirection(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int distance_joint_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: LuaWrapper::push(L, module->getDistanceJointConnectedBody(entity)); break;
			case /*axis_position*/2173619491007772698: LuaWrapper::push(L, module->getDistanceJointAxisPosition(entity)); break;
			case /*damping*/8331910337638582270: LuaWrapper::push(L, module->getDistanceJointDamping(entity)); break;
			case /*stiffness*/553508148491954027: LuaWrapper::push(L, module->getDistanceJointStiffness(entity)); break;
			case /*tolerance*/14660365190981525385: LuaWrapper::push(L, module->getDistanceJointTolerance(entity)); break;
			case /*limits*/7840594216495710123: LuaWrapper::push(L, module->getDistanceJointLimits(entity)); break;
			case /*linear_force*/16820564449043595678: LuaWrapper::push(L, module->getDistanceJointLinearForce(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int distance_joint_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: module->setDistanceJointConnectedBody(entity, LuaWrapper::checkArg<EntityPtr>(L, 3)); break;
			case /*axis_position*/2173619491007772698: module->setDistanceJointAxisPosition(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*damping*/8331910337638582270: module->setDistanceJointDamping(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*stiffness*/553508148491954027: module->setDistanceJointStiffness(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*tolerance*/14660365190981525385: module->setDistanceJointTolerance(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*limits*/7840594216495710123: module->setDistanceJointLimits(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int hinge_joint_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: LuaWrapper::push(L, module->getHingeJointConnectedBody(entity)); break;
			case /*axis_position*/2173619491007772698: LuaWrapper::push(L, module->getHingeJointAxisPosition(entity)); break;
			case /*axis_direction*/16325623039774346822: LuaWrapper::push(L, module->getHingeJointAxisDirection(entity)); break;
			case /*damping*/8331910337638582270: LuaWrapper::push(L, module->getHingeJointDamping(entity)); break;
			case /*stiffness*/553508148491954027: LuaWrapper::push(L, module->getHingeJointStiffness(entity)); break;
			case /*use_limit*/5067557280613061028: LuaWrapper::push(L, module->getHingeJointUseLimit(entity)); break;
			case /*limit*/6512589393810093616: LuaWrapper::push(L, module->getHingeJointLimit(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int hinge_joint_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: module->setHingeJointConnectedBody(entity, LuaWrapper::checkArg<EntityPtr>(L, 3)); break;
			case /*axis_position*/2173619491007772698: module->setHingeJointAxisPosition(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*axis_direction*/16325623039774346822: module->setHingeJointAxisDirection(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*damping*/8331910337638582270: module->setHingeJointDamping(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*stiffness*/553508148491954027: module->setHingeJointStiffness(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*use_limit*/5067557280613061028: module->setHingeJointUseLimit(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*limit*/6512589393810093616: module->setHingeJointLimit(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int spherical_joint_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: LuaWrapper::push(L, module->getSphericalJointConnectedBody(entity)); break;
			case /*axis_position*/2173619491007772698: LuaWrapper::push(L, module->getSphericalJointAxisPosition(entity)); break;
			case /*axis_direction*/16325623039774346822: LuaWrapper::push(L, module->getSphericalJointAxisDirection(entity)); break;
			case /*use_limit*/5067557280613061028: LuaWrapper::push(L, module->getSphericalJointUseLimit(entity)); break;
			case /*limit*/6512589393810093616: LuaWrapper::push(L, module->getSphericalJointLimit(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int spherical_joint_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*connected_body*/16103897983733153436: module->setSphericalJointConnectedBody(entity, LuaWrapper::checkArg<EntityPtr>(L, 3)); break;
			case /*axis_position*/2173619491007772698: module->setSphericalJointAxisPosition(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*axis_direction*/16325623039774346822: module->setSphericalJointAxisDirection(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*use_limit*/5067557280613061028: module->setSphericalJointUseLimit(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*limit*/6512589393810093616: module->setSphericalJointLimit(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int Controller_getGravitySpeed(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		LuaWrapper::push(L, 	module->getGravitySpeed(entity));
		return 1;
	}
	
	int Controller_move(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		auto v = LuaWrapper::checkArg<Vec3>(L, 2);
		module->moveController(entity, v);
		return 0;
	}
	
	int Controller_isCollisionDown(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		LuaWrapper::push(L, 	module->isControllerCollisionDown(entity));
		return 1;
	}
	
	int Controller_resize(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		auto height = LuaWrapper::checkArg<float>(L, 2);
		module->resizeController(entity, height);
		return 0;
	}
	
	int physical_controller_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*layer*/12438280802495919435: LuaWrapper::push(L, module->getControllerLayer(entity)); break;
			case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getControllerRadius(entity)); break;
			case /*height*/3439375685700528633: LuaWrapper::push(L, module->getControllerHeight(entity)); break;
			case /*use_custom_gravity*/15555178764847332552: LuaWrapper::push(L, module->getControllerCustomGravity(entity)); break;
			case /*custom_gravity_acceleration*/12693697298512190214: LuaWrapper::push(L, module->getControllerCustomGravityAcceleration(entity)); break;
			case /*use_root_motion*/7336167410229006784: LuaWrapper::push(L, module->getControllerUseRootMotion(entity)); break;
			case /*getGravitySpeed*/14023941067117348079: lua_pushcfunction(L, Controller_getGravitySpeed, "Controller_getGravitySpeed"); break;
			case /*move*/4303913335132134325: lua_pushcfunction(L, Controller_move, "Controller_move"); break;
			case /*isCollisionDown*/9137665887596174557: lua_pushcfunction(L, Controller_isCollisionDown, "Controller_isCollisionDown"); break;
			case /*resize*/14316244282687965501: lua_pushcfunction(L, Controller_resize, "Controller_resize"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int physical_controller_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*layer*/12438280802495919435: module->setControllerLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*radius*/3015162214864260720: module->setControllerRadius(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*height*/3439375685700528633: module->setControllerHeight(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*use_custom_gravity*/15555178764847332552: module->setControllerCustomGravity(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*custom_gravity_acceleration*/12693697298512190214: module->setControllerCustomGravityAcceleration(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*use_root_motion*/7336167410229006784: module->setControllerUseRootMotion(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int Actor_putToSleep(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		module->putToSleep(entity);
		return 0;
	}
	
	int Actor_addForceAtPos(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		auto force = LuaWrapper::checkArg<Vec3>(L, 2);
		auto pos = LuaWrapper::checkArg<Vec3>(L, 3);
		module->addForceAtPos(entity, force, pos);
		return 0;
	}
	
	int Actor_applyForce(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		auto force = LuaWrapper::checkArg<Vec3>(L, 2);
		module->applyForceToActor(entity, force);
		return 0;
	}
	
	int Actor_applyImpulse(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		auto force = LuaWrapper::checkArg<Vec3>(L, 2);
		module->applyImpulseToActor(entity, force);
		return 0;
	}
	
	int rigid_actor_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*boxes*/8373401147270948593: {
				using GetterModule = PhysicsModule;
				auto getter = [](lua_State* L) ->int {
					LuaWrapper::checkTableArg(L, 1); // self
					auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
					EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
					if (lua_type(L, 2) == LUA_TSTRING) {
						auto adder = [](lua_State* L) -> int  {
							auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
							EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
							module->addBox(entity, module->getBoxCount(entity));
							return 0;
						};
						
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						if (equalStrings(prop_name, "add")) {
							LuaWrapper::push(L, module);
							LuaWrapper::push(L, entity.index);
							lua_pushcclosure(L, adder, "adder", 2);
							return 1;
						}
						else {
							ASSERT(false);
							luaL_error(L, "Unknown property %s", prop_name);
						}
					}
					
					auto getter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						switch (name_hash) {
							case /*half_extents*/854520953009164070: LuaWrapper::push(L, module->getBoxHalfExtents(entity, index)); break;
							case /*position_offset*/15220513277102850184: LuaWrapper::push(L, module->getBoxOffsetPosition(entity, index)); break;
							case /*rotation_offset*/6621896392170407801: LuaWrapper::push(L, module->getBoxOffsetRotation(entity, index)); break;
							default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
						}
						return 1;
					};
					
					auto setter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						switch (name_hash) {
							case /*half_extents*/854520953009164070: module->setBoxHalfExtents(entity, index, LuaWrapper::checkArg<Vec3>(L, 3)); break;
							case /*position_offset*/15220513277102850184: module->setBoxOffsetPosition(entity, index, LuaWrapper::checkArg<Vec3>(L, 3)); break;
							case /*rotation_offset*/6621896392170407801: module->setBoxOffsetRotation(entity, index, LuaWrapper::checkArg<Vec3>(L, 3)); break;
							
							case 0:	
							default: { ASSERT(false); luaL_error(L, "Unknown property %ss", prop_name); break; }
						}
						return 0;
					};
					
					i32 index = LuaWrapper::checkArg<i32>(L, 2) - 1;
					i32 num_elements = module->getBoxCount(entity);
					if (index >= num_elements) {
						lua_pushnil(L);
						return 1;
					}
					
					lua_newtable(L);
					lua_newtable(L);
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, getter, "getter", 3);
					lua_setfield(L, -2, "__index");
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, setter, "setter", 3);
					lua_setfield(L, -2, "__newindex");
					
					lua_setmetatable(L, -2);
					return 1;
				};
				
				lua_newtable(L); // {}
				lua_newtable(L); // {}, metatable
				LuaWrapper::push(L, module);
				LuaWrapper::push(L, entity.index);
				lua_pushcclosure(L, getter, "getter", 2);
				lua_setfield(L, -2, "__index"); // {}, mt
				lua_setmetatable(L, -2); // {}
				break;
			}
			case /*spheres*/15491754885903120859: {
				using GetterModule = PhysicsModule;
				auto getter = [](lua_State* L) ->int {
					LuaWrapper::checkTableArg(L, 1); // self
					auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
					EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
					if (lua_type(L, 2) == LUA_TSTRING) {
						auto adder = [](lua_State* L) -> int  {
							auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
							EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
							module->addSphere(entity, module->getSphereCount(entity));
							return 0;
						};
						
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						if (equalStrings(prop_name, "add")) {
							LuaWrapper::push(L, module);
							LuaWrapper::push(L, entity.index);
							lua_pushcclosure(L, adder, "adder", 2);
							return 1;
						}
						else {
							ASSERT(false);
							luaL_error(L, "Unknown property %s", prop_name);
						}
					}
					
					auto getter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						switch (name_hash) {
							case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getSphereRadius(entity, index)); break;
							case /*position_offset*/15220513277102850184: LuaWrapper::push(L, module->getSphereOffsetPosition(entity, index)); break;
							default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
						}
						return 1;
					};
					
					auto setter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						switch (name_hash) {
							case /*radius*/3015162214864260720: module->setSphereRadius(entity, index, LuaWrapper::checkArg<float>(L, 3)); break;
							case /*position_offset*/15220513277102850184: module->setSphereOffsetPosition(entity, index, LuaWrapper::checkArg<Vec3>(L, 3)); break;
							
							case 0:	
							default: { ASSERT(false); luaL_error(L, "Unknown property %ss", prop_name); break; }
						}
						return 0;
					};
					
					i32 index = LuaWrapper::checkArg<i32>(L, 2) - 1;
					i32 num_elements = module->getSphereCount(entity);
					if (index >= num_elements) {
						lua_pushnil(L);
						return 1;
					}
					
					lua_newtable(L);
					lua_newtable(L);
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, getter, "getter", 3);
					lua_setfield(L, -2, "__index");
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, setter, "setter", 3);
					lua_setfield(L, -2, "__newindex");
					
					lua_setmetatable(L, -2);
					return 1;
				};
				
				lua_newtable(L); // {}
				lua_newtable(L); // {}, metatable
				LuaWrapper::push(L, module);
				LuaWrapper::push(L, entity.index);
				lua_pushcclosure(L, getter, "getter", 2);
				lua_setfield(L, -2, "__index"); // {}, mt
				lua_setmetatable(L, -2); // {}
				break;
			}
			case /*velocity*/6081828252729856333: LuaWrapper::push(L, module->getActorVelocity(entity)); break;
			case /*speed*/5411191639289302350: LuaWrapper::push(L, module->getActorSpeed(entity)); break;
			case /*layer*/12438280802495919435: LuaWrapper::push(L, module->getActorLayer(entity)); break;
			case /*dynamic*/9000946549947402400: LuaWrapper::push(L, (i32)module->getActorDynamicType(entity)); break;
			case /*is_trigger*/1343142603875055721: LuaWrapper::push(L, module->getActorIsTrigger(entity)); break;
			case /*mesh*/6218765765714358715: LuaWrapper::push(L, module->getActorMesh(entity)); break;
			case /*material*/13073839037530523491: LuaWrapper::push(L, module->getActorMaterial(entity)); break;
			case /*ccd*/13088881172075296505: LuaWrapper::push(L, module->getActorCCD(entity)); break;
			case /*putToSleep*/245310123528029111: lua_pushcfunction(L, Actor_putToSleep, "Actor_putToSleep"); break;
			case /*addForceAtPos*/604890780200946858: lua_pushcfunction(L, Actor_addForceAtPos, "Actor_addForceAtPos"); break;
			case /*applyForce*/11411330100860280528: lua_pushcfunction(L, Actor_applyForce, "Actor_applyForce"); break;
			case /*applyImpulse*/15938965961108614155: lua_pushcfunction(L, Actor_applyImpulse, "Actor_applyImpulse"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int rigid_actor_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*layer*/12438280802495919435: module->setActorLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*dynamic*/9000946549947402400: module->setActorDynamicType(entity, (PhysicsModule::DynamicType)LuaWrapper::checkArg<i32>(L, 3)); break;
			case /*is_trigger*/1343142603875055721: module->setActorIsTrigger(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*mesh*/6218765765714358715: module->setActorMesh(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*material*/13073839037530523491: module->setActorMaterial(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*ccd*/13088881172075296505: module->setActorCCD(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int wheel_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*spring_strength*/16971878798002571339: LuaWrapper::push(L, module->getWheelSpringStrength(entity)); break;
			case /*spring_max_compression*/9874367625088890659: LuaWrapper::push(L, module->getWheelSpringMaxCompression(entity)); break;
			case /*spring_max_droop*/11881123303151187909: LuaWrapper::push(L, module->getWheelSpringMaxDroop(entity)); break;
			case /*spring_damper_rate*/6764759324090625456: LuaWrapper::push(L, module->getWheelSpringDamperRate(entity)); break;
			case /*radius*/3015162214864260720: LuaWrapper::push(L, module->getWheelRadius(entity)); break;
			case /*width*/11879614677253768822: LuaWrapper::push(L, module->getWheelWidth(entity)); break;
			case /*mass*/11745911936662003018: LuaWrapper::push(L, module->getWheelMass(entity)); break;
			case /*moi*/3012507977500415911: LuaWrapper::push(L, module->getWheelMOI(entity)); break;
			case /*slot*/686993539073000551: LuaWrapper::push(L, (i32)module->getWheelSlot(entity)); break;
			case /*rpm*/17640912311330498303: LuaWrapper::push(L, module->getWheelRPM(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int wheel_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*spring_strength*/16971878798002571339: module->setWheelSpringStrength(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*spring_max_compression*/9874367625088890659: module->setWheelSpringMaxCompression(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*spring_max_droop*/11881123303151187909: module->setWheelSpringMaxDroop(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*spring_damper_rate*/6764759324090625456: module->setWheelSpringDamperRate(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*radius*/3015162214864260720: module->setWheelRadius(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*width*/11879614677253768822: module->setWheelWidth(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*mass*/11745911936662003018: module->setWheelMass(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*moi*/3012507977500415911: module->setWheelMOI(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*slot*/686993539073000551: module->setWheelSlot(entity, (PhysicsModule::WheelSlot)LuaWrapper::checkArg<i32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int vehicle_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*peak_torque*/108650766517059246: LuaWrapper::push(L, module->getVehiclePeakTorque(entity)); break;
			case /*max__r_p_m*/9244714665917709065: LuaWrapper::push(L, module->getVehicleMaxRPM(entity)); break;
			case /*rpm*/17640912311330498303: LuaWrapper::push(L, module->getVehicleRPM(entity)); break;
			case /*current_gear*/18335556865412416553: LuaWrapper::push(L, module->getVehicleCurrentGear(entity)); break;
			case /*speed*/5411191639289302350: LuaWrapper::push(L, module->getVehicleSpeed(entity)); break;
			case /*chassis*/7246320742106666122: LuaWrapper::push(L, module->getVehicleChassis(entity)); break;
			case /*mass*/11745911936662003018: LuaWrapper::push(L, module->getVehicleMass(entity)); break;
			case /*moi_multiplier*/8431526794642328585: LuaWrapper::push(L, module->getVehicleMOIMultiplier(entity)); break;
			case /*center_of_mass*/16562895722780885937: LuaWrapper::push(L, module->getVehicleCenterOfMass(entity)); break;
			case /*wheels_layer*/13903571279515726310: LuaWrapper::push(L, module->getVehicleWheelsLayer(entity)); break;
			case /*chassis_layer*/15986641726988781619: LuaWrapper::push(L, module->getVehicleChassisLayer(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int vehicle_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*peak_torque*/108650766517059246: module->setVehiclePeakTorque(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*max__r_p_m*/9244714665917709065: module->setVehicleMaxRPM(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*chassis*/7246320742106666122: module->setVehicleChassis(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*mass*/11745911936662003018: module->setVehicleMass(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*moi_multiplier*/8431526794642328585: module->setVehicleMOIMultiplier(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*center_of_mass*/16562895722780885937: module->setVehicleCenterOfMass(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*wheels_layer*/13903571279515726310: module->setVehicleWheelsLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*chassis_layer*/15986641726988781619: module->setVehicleChassisLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int physical_instanced_cube_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*half_extents*/854520953009164070: LuaWrapper::push(L, module->getInstancedCubeHalfExtents(entity)); break;
			case /*layer*/12438280802495919435: LuaWrapper::push(L, module->getInstancedCubeLayer(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int physical_instanced_cube_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*half_extents*/854520953009164070: module->setInstancedCubeHalfExtents(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*layer*/12438280802495919435: module->setInstancedCubeLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int physical_instanced_mesh_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*layer*/12438280802495919435: LuaWrapper::push(L, module->getInstancedMeshLayer(entity)); break;
			case /*mesh*/6218765765714358715: LuaWrapper::push(L, module->getInstancedMeshGeomPath(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int physical_instanced_mesh_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (PhysicsModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*layer*/12438280802495919435: module->setInstancedMeshLayer(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*mesh*/6218765765714358715: module->setInstancedMeshGeomPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	int RenderModule_castRay(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		Ray ray;
		
		if(!LuaWrapper::checkField(L, 2, "origin", &ray.origin)) luaL_error(L, "Invalid argument");
		if(!LuaWrapper::checkField(L, 2, "dir", &ray.dir)) luaL_error(L, "Invalid argument");
		auto ignore = LuaWrapper::checkArg<EntityPtr>(L, 3);
		auto s = 	module->castRay(ray, ignore);
		lua_newtable(L);
		LuaWrapper::push(L, s.is_hit);
		lua_setfield(L, -2, "is_hit");
		LuaWrapper::push(L, s.t);
		lua_setfield(L, -2, "t");
		LuaWrapper::push(L, s.origin);
		lua_setfield(L, -2, "origin");
		LuaWrapper::push(L, s.dir);
		lua_setfield(L, -2, "dir");
		LuaWrapper::push(L, s.mesh);
		lua_setfield(L, -2, "mesh");
		LuaWrapper::push(L, s.entity);
		lua_setfield(L, -2, "entity");
		LuaWrapper::push(L, s.component_type);
		lua_setfield(L, -2, "component_type");
		LuaWrapper::push(L, s.subindex);
		lua_setfield(L, -2, "subindex");
		return 1;
	}
	
	int RenderModule_castRayTerrain(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		Ray ray;
		
		if(!LuaWrapper::checkField(L, 2, "origin", &ray.origin)) luaL_error(L, "Invalid argument");
		if(!LuaWrapper::checkField(L, 2, "dir", &ray.dir)) luaL_error(L, "Invalid argument");
		auto s = 	module->castRayTerrain(ray);
		lua_newtable(L);
		LuaWrapper::push(L, s.is_hit);
		lua_setfield(L, -2, "is_hit");
		LuaWrapper::push(L, s.t);
		lua_setfield(L, -2, "t");
		LuaWrapper::push(L, s.origin);
		lua_setfield(L, -2, "origin");
		LuaWrapper::push(L, s.dir);
		lua_setfield(L, -2, "dir");
		LuaWrapper::push(L, s.mesh);
		lua_setfield(L, -2, "mesh");
		LuaWrapper::push(L, s.entity);
		lua_setfield(L, -2, "entity");
		LuaWrapper::push(L, s.component_type);
		lua_setfield(L, -2, "component_type");
		LuaWrapper::push(L, s.subindex);
		lua_setfield(L, -2, "subindex");
		return 1;
	}
	
	int RenderModule_addDebugTriangle(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto p0 = LuaWrapper::checkArg<DVec3>(L, 2);
		auto p1 = LuaWrapper::checkArg<DVec3>(L, 3);
		auto p2 = LuaWrapper::checkArg<DVec3>(L, 4);
		auto color = LuaWrapper::checkArg<Color>(L, 5);
		module->addDebugTriangle(p0, p1, p2, color);
		return 0;
	}
	
	int RenderModule_addDebugLine(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto from = LuaWrapper::checkArg<DVec3>(L, 2);
		auto to = LuaWrapper::checkArg<DVec3>(L, 3);
		auto color = LuaWrapper::checkArg<Color>(L, 4);
		module->addDebugLine(from, to, color);
		return 0;
	}
	
	int RenderModule_addDebugCross(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto center = LuaWrapper::checkArg<DVec3>(L, 2);
		auto size = LuaWrapper::checkArg<float>(L, 3);
		auto color = LuaWrapper::checkArg<Color>(L, 4);
		module->addDebugCross(center, size, color);
		return 0;
	}
	
	int RenderModule_addDebugBone(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto pos = LuaWrapper::checkArg<DVec3>(L, 2);
		auto dir = LuaWrapper::checkArg<Vec3>(L, 3);
		auto up = LuaWrapper::checkArg<Vec3>(L, 4);
		auto right = LuaWrapper::checkArg<Vec3>(L, 5);
		auto color = LuaWrapper::checkArg<Color>(L, 6);
		module->addDebugBone(pos, dir, up, right, color);
		return 0;
	}
	
	int RenderModule_addDebugCube(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto pos = LuaWrapper::checkArg<DVec3>(L, 2);
		auto dir = LuaWrapper::checkArg<Vec3>(L, 3);
		auto up = LuaWrapper::checkArg<Vec3>(L, 4);
		auto right = LuaWrapper::checkArg<Vec3>(L, 5);
		auto color = LuaWrapper::checkArg<Color>(L, 6);
		module->addDebugCube(pos, dir, up, right, color);
		return 0;
	}
	
	int RenderModule_addDebugCubeSolid(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto from = LuaWrapper::checkArg<DVec3>(L, 2);
		auto max = LuaWrapper::checkArg<DVec3>(L, 3);
		auto color = LuaWrapper::checkArg<Color>(L, 4);
		module->addDebugCubeSolid(from, max, color);
		return 0;
	}
	
	int RenderModule_setActiveCamera(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto camera = LuaWrapper::checkArg<EntityRef>(L, 2);
		module->setActiveCamera(camera);
		return 0;
	}
	
	int RenderModule_setActiveEnvironment(lua_State* L) {
		LuaWrapper::checkTableArg(L, 1);
		RenderModule* module;
		if (!LuaWrapper::checkField(L, 1, "_module", &module)) luaL_argerror(L, 1, "Module expected");
		auto entity = LuaWrapper::checkArg<EntityRef>(L, 2);
		module->setActiveEnvironment(entity);
		return 0;
	}
	
	int Camera_getRay(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		auto screen_pos = LuaWrapper::checkArg<Vec2>(L, 2);
		auto s = 	module->getCameraRay(entity, screen_pos);
		lua_newtable(L);
		LuaWrapper::push(L, s.origin);
		lua_setfield(L, -2, "origin");
		LuaWrapper::push(L, s.dir);
		lua_setfield(L, -2, "dir");
		
		return 1;
	}
	
	int camera_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*fov*/6690385503285762729: LuaWrapper::push(L, module->getCamera(entity).fov); break;
			case /*near*/15894551059266337426: LuaWrapper::push(L, module->getCamera(entity).near); break;
			case /*far*/5972339069944419853: LuaWrapper::push(L, module->getCamera(entity).far); break;
			case /*is_ortho*/14621152001338781589: LuaWrapper::push(L, module->getCamera(entity).is_ortho); break;
			case /*ortho_size*/11495164026014626543: LuaWrapper::push(L, module->getCamera(entity).ortho_size); break;
			case /*film_grain_intensity*/3636779622785255289: LuaWrapper::push(L, module->getCamera(entity).film_grain_intensity); break;
			case /*dof_enabled*/11850714655574030078: LuaWrapper::push(L, module->getCamera(entity).dof_enabled); break;
			case /*dof_distance*/9831990634604227862: LuaWrapper::push(L, module->getCamera(entity).dof_distance); break;
			case /*dof_range*/14634816653028108528: LuaWrapper::push(L, module->getCamera(entity).dof_range); break;
			case /*dof_max_blur_size*/11058903951847365969: LuaWrapper::push(L, module->getCamera(entity).dof_max_blur_size); break;
			case /*dof_sharp_range*/14359466895747784007: LuaWrapper::push(L, module->getCamera(entity).dof_sharp_range); break;
			case /*bloom_enabled*/13355959044402572082: LuaWrapper::push(L, module->getCamera(entity).bloom_enabled); break;
			case /*bloom_tonemap_enabled*/560781509978742053: LuaWrapper::push(L, module->getCamera(entity).bloom_tonemap_enabled); break;
			case /*bloom_accomodation_speed*/625785543228489392: LuaWrapper::push(L, module->getCamera(entity).bloom_accomodation_speed); break;
			case /*bloom_avg_bloom_multiplier*/11648327012290020021: LuaWrapper::push(L, module->getCamera(entity).bloom_avg_bloom_multiplier); break;
			case /*bloom_exposure*/13164642978374509665: LuaWrapper::push(L, module->getCamera(entity).bloom_exposure); break;
			case /*getRay*/17827108223211535328: lua_pushcfunction(L, Camera_getRay, "Camera_getRay"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int camera_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*fov*/6690385503285762729: module->getCamera(entity).fov = LuaWrapper::checkArg<float>(L, 3); break;
			case /*near*/15894551059266337426: module->getCamera(entity).near = LuaWrapper::checkArg<float>(L, 3); break;
			case /*far*/5972339069944419853: module->getCamera(entity).far = LuaWrapper::checkArg<float>(L, 3); break;
			case /*is_ortho*/14621152001338781589: module->getCamera(entity).is_ortho = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*ortho_size*/11495164026014626543: module->getCamera(entity).ortho_size = LuaWrapper::checkArg<float>(L, 3); break;
			case /*film_grain_intensity*/3636779622785255289: module->getCamera(entity).film_grain_intensity = LuaWrapper::checkArg<float>(L, 3); break;
			case /*dof_enabled*/11850714655574030078: module->getCamera(entity).dof_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*dof_distance*/9831990634604227862: module->getCamera(entity).dof_distance = LuaWrapper::checkArg<float>(L, 3); break;
			case /*dof_range*/14634816653028108528: module->getCamera(entity).dof_range = LuaWrapper::checkArg<float>(L, 3); break;
			case /*dof_max_blur_size*/11058903951847365969: module->getCamera(entity).dof_max_blur_size = LuaWrapper::checkArg<float>(L, 3); break;
			case /*dof_sharp_range*/14359466895747784007: module->getCamera(entity).dof_sharp_range = LuaWrapper::checkArg<float>(L, 3); break;
			case /*bloom_enabled*/13355959044402572082: module->getCamera(entity).bloom_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*bloom_tonemap_enabled*/560781509978742053: module->getCamera(entity).bloom_tonemap_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*bloom_accomodation_speed*/625785543228489392: module->getCamera(entity).bloom_accomodation_speed = LuaWrapper::checkArg<float>(L, 3); break;
			case /*bloom_avg_bloom_multiplier*/11648327012290020021: module->getCamera(entity).bloom_avg_bloom_multiplier = LuaWrapper::checkArg<float>(L, 3); break;
			case /*bloom_exposure*/13164642978374509665: module->getCamera(entity).bloom_exposure = LuaWrapper::checkArg<float>(L, 3); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int decal_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*uv_scale*/17518662549011029808: LuaWrapper::push(L, module->getDecal(entity).uv_scale); break;
			case /*material*/13073839037530523491: LuaWrapper::push(L, module->getDecalMaterialPath(entity)); break;
			case /*half_extents*/854520953009164070: LuaWrapper::push(L, module->getDecalHalfExtents(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int decal_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*uv_scale*/17518662549011029808: module->getDecal(entity).uv_scale = LuaWrapper::checkArg<Vec2>(L, 3); break;
			case /*material*/13073839037530523491: module->setDecalMaterialPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*half_extents*/854520953009164070: module->setDecalHalfExtents(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int environment_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*light_color*/18143883780470064812: LuaWrapper::push(L, module->getEnvironment(entity).light_color); break;
			case /*direct_intensity*/17537531595767570348: LuaWrapper::push(L, module->getEnvironment(entity).direct_intensity); break;
			case /*indirect_intensity*/6837981498271808957: LuaWrapper::push(L, module->getEnvironment(entity).indirect_intensity); break;
			case /*sky_intensity*/3173456512864827325: LuaWrapper::push(L, module->getEnvironment(entity).sky_intensity); break;
			case /*scatter_rayleigh*/9557052946815348457: LuaWrapper::push(L, module->getEnvironment(entity).scatter_rayleigh); break;
			case /*scatter_mie*/12822292655848233293: LuaWrapper::push(L, module->getEnvironment(entity).scatter_mie); break;
			case /*absorb_mie*/11606506487617731568: LuaWrapper::push(L, module->getEnvironment(entity).absorb_mie); break;
			case /*sunlight_color*/14973262653868318857: LuaWrapper::push(L, module->getEnvironment(entity).sunlight_color); break;
			case /*fog_scattering*/2562035179571876730: LuaWrapper::push(L, module->getEnvironment(entity).fog_scattering); break;
			case /*fog_density*/1814628136324369351: LuaWrapper::push(L, module->getEnvironment(entity).fog_density); break;
			case /*sunlight_strength*/5454775369551634741: LuaWrapper::push(L, module->getEnvironment(entity).sunlight_strength); break;
			case /*height_distribution_rayleigh*/13313766981166545030: LuaWrapper::push(L, module->getEnvironment(entity).height_distribution_rayleigh); break;
			case /*height_distribution_mie*/13564639059375118904: LuaWrapper::push(L, module->getEnvironment(entity).height_distribution_mie); break;
			case /*ground_r*/14315065516641866618: LuaWrapper::push(L, module->getEnvironment(entity).ground_r); break;
			case /*atmo_r*/16979673882500863995: LuaWrapper::push(L, module->getEnvironment(entity).atmo_r); break;
			case /*fog_top*/5366630513121580472: LuaWrapper::push(L, module->getEnvironment(entity).fog_top); break;
			case /*godrays_enabled*/7713291462726426963: LuaWrapper::push(L, module->getEnvironment(entity).godrays_enabled); break;
			case /*atmo_enabled*/17236810047590804415: LuaWrapper::push(L, module->getEnvironment(entity).atmo_enabled); break;
			case /*clouds_enabled*/11051090476852783336: LuaWrapper::push(L, module->getEnvironment(entity).clouds_enabled); break;
			case /*clouds_top*/7124455181160832447: LuaWrapper::push(L, module->getEnvironment(entity).clouds_top); break;
			case /*clouds_bottom*/3386464292780187112: LuaWrapper::push(L, module->getEnvironment(entity).clouds_bottom); break;
			case /*cast_shadows*/10697859520051395372: LuaWrapper::push(L, module->getEnvironmentCastShadows(entity)); break;
			case /*sky_texture*/17256734141889372778: LuaWrapper::push(L, module->getEnvironmentSkyTexture(entity)); break;
			case /*shadowmap_cascades*/5777342048330698579: LuaWrapper::push(L, module->getEnvironmentShadowmapCascades(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int environment_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*light_color*/18143883780470064812: module->getEnvironment(entity).light_color = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*direct_intensity*/17537531595767570348: module->getEnvironment(entity).direct_intensity = LuaWrapper::checkArg<float>(L, 3); break;
			case /*indirect_intensity*/6837981498271808957: module->getEnvironment(entity).indirect_intensity = LuaWrapper::checkArg<float>(L, 3); break;
			case /*sky_intensity*/3173456512864827325: module->getEnvironment(entity).sky_intensity = LuaWrapper::checkArg<float>(L, 3); break;
			case /*scatter_rayleigh*/9557052946815348457: module->getEnvironment(entity).scatter_rayleigh = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*scatter_mie*/12822292655848233293: module->getEnvironment(entity).scatter_mie = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*absorb_mie*/11606506487617731568: module->getEnvironment(entity).absorb_mie = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*sunlight_color*/14973262653868318857: module->getEnvironment(entity).sunlight_color = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*fog_scattering*/2562035179571876730: module->getEnvironment(entity).fog_scattering = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*fog_density*/1814628136324369351: module->getEnvironment(entity).fog_density = LuaWrapper::checkArg<float>(L, 3); break;
			case /*sunlight_strength*/5454775369551634741: module->getEnvironment(entity).sunlight_strength = LuaWrapper::checkArg<float>(L, 3); break;
			case /*height_distribution_rayleigh*/13313766981166545030: module->getEnvironment(entity).height_distribution_rayleigh = LuaWrapper::checkArg<float>(L, 3); break;
			case /*height_distribution_mie*/13564639059375118904: module->getEnvironment(entity).height_distribution_mie = LuaWrapper::checkArg<float>(L, 3); break;
			case /*ground_r*/14315065516641866618: module->getEnvironment(entity).ground_r = LuaWrapper::checkArg<float>(L, 3); break;
			case /*atmo_r*/16979673882500863995: module->getEnvironment(entity).atmo_r = LuaWrapper::checkArg<float>(L, 3); break;
			case /*fog_top*/5366630513121580472: module->getEnvironment(entity).fog_top = LuaWrapper::checkArg<float>(L, 3); break;
			case /*godrays_enabled*/7713291462726426963: module->getEnvironment(entity).godrays_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*atmo_enabled*/17236810047590804415: module->getEnvironment(entity).atmo_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*clouds_enabled*/11051090476852783336: module->getEnvironment(entity).clouds_enabled = LuaWrapper::checkArg<bool>(L, 3); break;
			case /*clouds_top*/7124455181160832447: module->getEnvironment(entity).clouds_top = LuaWrapper::checkArg<float>(L, 3); break;
			case /*clouds_bottom*/3386464292780187112: module->getEnvironment(entity).clouds_bottom = LuaWrapper::checkArg<float>(L, 3); break;
			case /*cast_shadows*/10697859520051395372: module->setEnvironmentCastShadows(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*sky_texture*/17256734141889372778: module->setEnvironmentSkyTexture(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*shadowmap_cascades*/5777342048330698579: module->setEnvironmentShadowmapCascades(entity, LuaWrapper::checkArg<Vec4>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int point_light_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*color*/880366885425937065: LuaWrapper::push(L, module->getPointLight(entity).color); break;
			case /*intensity*/9797720740047392814: LuaWrapper::push(L, module->getPointLight(entity).intensity); break;
			case /*fov*/6690385503285762729: LuaWrapper::push(L, module->getPointLight(entity).fov); break;
			case /*attenuation_param*/8317229310512315001: LuaWrapper::push(L, module->getPointLight(entity).attenuation_param); break;
			case /*range*/16674851338683446217: LuaWrapper::push(L, module->getPointLightRange(entity)); break;
			case /*cast_shadows*/10697859520051395372: LuaWrapper::push(L, module->getPointLightCastShadows(entity)); break;
			case /*dynamic*/9000946549947402400: LuaWrapper::push(L, module->getPointLightDynamic(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int point_light_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*color*/880366885425937065: module->getPointLight(entity).color = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*intensity*/9797720740047392814: module->getPointLight(entity).intensity = LuaWrapper::checkArg<float>(L, 3); break;
			case /*fov*/6690385503285762729: module->getPointLight(entity).fov = LuaWrapper::checkArg<float>(L, 3); break;
			case /*attenuation_param*/8317229310512315001: module->getPointLight(entity).attenuation_param = LuaWrapper::checkArg<float>(L, 3); break;
			case /*range*/16674851338683446217: module->setPointLightRange(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*cast_shadows*/10697859520051395372: module->setPointLightCastShadows(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*dynamic*/9000946549947402400: module->setPointLightDynamic(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int reflection_probe_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*size*/14597235074366301544: LuaWrapper::push(L, module->getReflectionProbe(entity).size); break;
			case /*half_extents*/854520953009164070: LuaWrapper::push(L, module->getReflectionProbe(entity).half_extents); break;
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isReflectionProbeEnabled(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int reflection_probe_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*size*/14597235074366301544: module->getReflectionProbe(entity).size = LuaWrapper::checkArg<u32>(L, 3); break;
			case /*half_extents*/854520953009164070: module->getReflectionProbe(entity).half_extents = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*enabled*/13840943435668507618: module->enableReflectionProbe(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int environment_probe_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*inner_range*/8429324265072172284: LuaWrapper::push(L, module->getEnvironmentProbe(entity).inner_range); break;
			case /*outer_range*/7392264662239472827: LuaWrapper::push(L, module->getEnvironmentProbe(entity).outer_range); break;
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isEnvironmentProbeEnabled(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int environment_probe_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*inner_range*/8429324265072172284: module->getEnvironmentProbe(entity).inner_range = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*outer_range*/7392264662239472827: module->getEnvironmentProbe(entity).outer_range = LuaWrapper::checkArg<Vec3>(L, 3); break;
			case /*enabled*/13840943435668507618: module->enableEnvironmentProbe(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int BoneAttachment_setRotation(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		auto rot = LuaWrapper::checkArg<Quat>(L, 2);
		module->setBoneAttachmentRotationQuat(entity, rot);
		return 0;
	}
	
	int bone_attachment_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*parent*/8742773298275793466: LuaWrapper::push(L, module->getBoneAttachmentParent(entity)); break;
			case /*bone*/2783102482993102300: LuaWrapper::push(L, module->getBoneAttachmentBone(entity)); break;
			case /*relative_position*/11618981167408611974: LuaWrapper::push(L, module->getBoneAttachmentPosition(entity)); break;
			case /*relative_rotation*/17991945435353486994: LuaWrapper::push(L, module->getBoneAttachmentRotation(entity)); break;
			case /*setRotation*/8660453606820818866: lua_pushcfunction(L, BoneAttachment_setRotation, "BoneAttachment_setRotation"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int bone_attachment_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*parent*/8742773298275793466: module->setBoneAttachmentParent(entity, LuaWrapper::checkArg<EntityPtr>(L, 3)); break;
			case /*bone*/2783102482993102300: module->setBoneAttachmentBone(entity, LuaWrapper::checkArg<int>(L, 3)); break;
			case /*relative_position*/11618981167408611974: module->setBoneAttachmentPosition(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case /*relative_rotation*/17991945435353486994: module->setBoneAttachmentRotation(entity, LuaWrapper::checkArg<Vec3>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int particle_emitter_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*source*/17609862876178282011: LuaWrapper::push(L, module->getParticleEmitterPath(entity)); break;
			case /*autodestroy*/13701391921693763709: LuaWrapper::push(L, module->getParticleEmitterAutodestroy(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int particle_emitter_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*source*/17609862876178282011: module->setParticleEmitterPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*autodestroy*/13701391921693763709: module->setParticleEmitterAutodestroy(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int instanced_model_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*model*/8229337662361542422: LuaWrapper::push(L, module->getInstancedModelPath(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int instanced_model_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*model*/8229337662361542422: module->setInstancedModelPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int ModelInstance_overrideMaterialVec4(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		auto mesh_index = LuaWrapper::checkArg<u32>(L, 2);
		auto uniform_name = LuaWrapper::checkArg<const char*>(L, 3);
		auto value = LuaWrapper::checkArg<Vec4>(L, 4);
		LuaWrapper::push(L, 	module->overrideMaterialVec4(entity, mesh_index, uniform_name, value));
		return 1;
	}
	
	int ModelInstance_getModel(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		LuaWrapper::push(L, 	module->getModelInstanceModel(entity));
		return 1;
	}
	
	int model_instance_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: LuaWrapper::push(L, module->isModelInstanceEnabled(entity)); break;
			case /*source*/17609862876178282011: LuaWrapper::push(L, module->getModelInstancePath(entity)); break;
			case /*overrideMaterialVec4*/7886464768384394135: lua_pushcfunction(L, ModelInstance_overrideMaterialVec4, "ModelInstance_overrideMaterialVec4"); break;
			case /*getModel*/6439928831641943397: lua_pushcfunction(L, ModelInstance_getModel, "ModelInstance_getModel"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int model_instance_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*enabled*/13840943435668507618: module->enableModelInstance(entity, LuaWrapper::checkArg<bool>(L, 3)); break;
			case /*source*/17609862876178282011: module->setModelInstancePath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int curve_decal_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*material*/13073839037530523491: LuaWrapper::push(L, module->getCurveDecalMaterialPath(entity)); break;
			case /*half_extents*/854520953009164070: LuaWrapper::push(L, module->getCurveDecalHalfExtents(entity)); break;
			case /*uv_scale*/17518662549011029808: LuaWrapper::push(L, module->getCurveDecalUVScale(entity)); break;
			case /*bezier_p0*/1063905269850860960: LuaWrapper::push(L, module->getCurveDecalBezierP0(entity)); break;
			case /*bezier_p2*/17410494145398136508: LuaWrapper::push(L, module->getCurveDecalBezierP2(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int curve_decal_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*material*/13073839037530523491: module->setCurveDecalMaterialPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*half_extents*/854520953009164070: module->setCurveDecalHalfExtents(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*uv_scale*/17518662549011029808: module->setCurveDecalUVScale(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case /*bezier_p0*/1063905269850860960: module->setCurveDecalBezierP0(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case /*bezier_p2*/17410494145398136508: module->setCurveDecalBezierP2(entity, LuaWrapper::checkArg<Vec2>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int Terrain_getHeightAt(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		auto x = LuaWrapper::checkArg<float>(L, 2);
		auto z = LuaWrapper::checkArg<float>(L, 3);
		LuaWrapper::push(L, 	module->getTerrainHeightAt(entity, x, z));
		return 1;
	}
	
	int Terrain_getNormalAt(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		auto x = LuaWrapper::checkArg<float>(L, 2);
		auto z = LuaWrapper::checkArg<float>(L, 3);
		LuaWrapper::push(L, 	module->getTerrainNormalAt(entity, x, z));
		return 1;
	}
	
	int terrain_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*grass*/17684958279708910872: {
				using GetterModule = RenderModule;
				auto getter = [](lua_State* L) ->int {
					LuaWrapper::checkTableArg(L, 1); // self
					auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
					EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
					if (lua_type(L, 2) == LUA_TSTRING) {
						auto adder = [](lua_State* L) -> int  {
							auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
							EntityRef entity{LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
							module->addGrass(entity, module->getGrassCount(entity));
							return 0;
						};
						
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						if (equalStrings(prop_name, "add")) {
							LuaWrapper::push(L, module);
							LuaWrapper::push(L, entity.index);
							lua_pushcclosure(L, adder, "adder", 2);
							return 1;
						}
						else {
							ASSERT(false);
							luaL_error(L, "Unknown property %s", prop_name);
						}
					}
					
					auto getter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						switch (name_hash) {
							case /*rotation_mode*/217713799092262575: LuaWrapper::push(L, (i32)module->getGrassRotationMode(entity, index)); break;
							case /*distance*/17615932892140262544: LuaWrapper::push(L, module->getGrassDistance(entity, index)); break;
							case /*mesh*/6218765765714358715: LuaWrapper::push(L, module->getGrassPath(entity, index)); break;
							case /*spacing*/2859594769824822931: LuaWrapper::push(L, module->getGrassSpacing(entity, index)); break;
							default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
						}
						return 1;
					};
					
					auto setter = [](lua_State* L) -> int {
						LuaWrapper::checkTableArg(L, 1);
						const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
						XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
						auto* module = LuaWrapper::toType<GetterModule*>(L, lua_upvalueindex(1));
						EntityRef entity = {LuaWrapper::toType<i32>(L, lua_upvalueindex(2))};
						i32 index = LuaWrapper::toType<int>(L, lua_upvalueindex(3));
						switch (name_hash) {
							case /*rotation_mode*/217713799092262575: module->setGrassRotationMode(entity, index, (GrassRotationMode)LuaWrapper::checkArg<i32>(L, 3)); break;
							case /*distance*/17615932892140262544: module->setGrassDistance(entity, index, LuaWrapper::checkArg<float>(L, 3)); break;
							case /*mesh*/6218765765714358715: module->setGrassPath(entity, index, LuaWrapper::checkArg<Path>(L, 3)); break;
							case /*spacing*/2859594769824822931: module->setGrassSpacing(entity, index, LuaWrapper::checkArg<float>(L, 3)); break;
							
							case 0:	
							default: { ASSERT(false); luaL_error(L, "Unknown property %ss", prop_name); break; }
						}
						return 0;
					};
					
					i32 index = LuaWrapper::checkArg<i32>(L, 2) - 1;
					i32 num_elements = module->getGrassCount(entity);
					if (index >= num_elements) {
						lua_pushnil(L);
						return 1;
					}
					
					lua_newtable(L);
					lua_newtable(L);
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, getter, "getter", 3);
					lua_setfield(L, -2, "__index");
					
					lua_pushlightuserdata(L, (void*)module);
					LuaWrapper::push(L, entity.index);
					LuaWrapper::push(L, index);
					lua_pushcclosure(L, setter, "setter", 3);
					lua_setfield(L, -2, "__newindex");
					
					lua_setmetatable(L, -2);
					return 1;
				};
				
				lua_newtable(L); // {}
				lua_newtable(L); // {}, metatable
				LuaWrapper::push(L, module);
				LuaWrapper::push(L, entity.index);
				lua_pushcclosure(L, getter, "getter", 2);
				lua_setfield(L, -2, "__index"); // {}, mt
				lua_setmetatable(L, -2); // {}
				break;
			}
			case /*size*/14597235074366301544: LuaWrapper::push(L, module->getTerrainSize(entity)); break;
			case /*material*/13073839037530523491: LuaWrapper::push(L, module->getTerrainMaterialPath(entity)); break;
			case /*xz_scale*/2710990129242626426: LuaWrapper::push(L, module->getTerrainXZScale(entity)); break;
			case /*tesselation*/15900032269147374267: LuaWrapper::push(L, module->getTerrainTesselation(entity)); break;
			case /*base_grid_resolution*/10993858714653204735: LuaWrapper::push(L, module->getTerrainBaseGridResolution(entity)); break;
			case /*yscale*/9502059661590009697: LuaWrapper::push(L, module->getTerrainYScale(entity)); break;
			case /*getHeightAt*/10334719470066961856: lua_pushcfunction(L, Terrain_getHeightAt, "Terrain_getHeightAt"); break;
			case /*getNormalAt*/5262915926868391893: lua_pushcfunction(L, Terrain_getNormalAt, "Terrain_getNormalAt"); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int terrain_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*material*/13073839037530523491: module->setTerrainMaterialPath(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case /*xz_scale*/2710990129242626426: module->setTerrainXZScale(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case /*tesselation*/15900032269147374267: module->setTerrainTesselation(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*base_grid_resolution*/10993858714653204735: module->setTerrainBaseGridResolution(entity, LuaWrapper::checkArg<u32>(L, 3)); break;
			case /*yscale*/9502059661590009697: module->setTerrainYScale(entity, LuaWrapper::checkArg<float>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
	int procedural_geom_getter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*material*/13073839037530523491: LuaWrapper::push(L, module->getProceduralGeometryMaterial(entity)); break;
			case 0:
			default: { ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break; }
		}
		return 1;
	}
	
	int procedural_geom_setter(lua_State* L) {
		auto [imodule, entity] = checkComponent(L);
		auto* module = (RenderModule*)imodule;
		const char* prop_name = LuaWrapper::checkArg<const char*>(L, 2);
		XXH64_hash_t name_hash = XXH3_64bits(prop_name, strlen(prop_name));
		switch (name_hash) {
			case /*material*/13073839037530523491: module->setProceduralGeometryMaterial(entity, LuaWrapper::checkArg<Path>(L, 3)); break;
			case 0:
			default: ASSERT(false); luaL_error(L, "Unknown property %s", prop_name); break;
		}
		return 0;
	}
	
}

namespace Lumix {
	
	void registerLuaAPI(lua_State* L) {
		lua_newtable(L);
		lua_setglobal(L, "LumixModules");
		{
			lua_newtable(L);
			lua_getglobal(L, "LumixModules");
			lua_pushvalue(L, -2);
			lua_setfield(L, -2, "audio");
			lua_pop(L, 1);
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			lua_pushcfunction(L, lua_new_module, "new");
			lua_setfield(L, -2, "new");
			lua_pushcfunction(L, AudioModule_play, "play");
			lua_setfield(L, -2, "play");
			lua_pushcfunction(L, AudioModule_setMasterVolume, "setMasterVolume");
			lua_setfield(L, -2, "setMasterVolume");
			lua_pushcfunction(L, AudioModule_stop, "stop");
			lua_setfield(L, -2, "stop");
			lua_pushcfunction(L, AudioModule_isEnd, "isEnd");
			lua_setfield(L, -2, "isEnd");
			lua_pushcfunction(L, AudioModule_setFrequency, "setFrequency");
			lua_setfield(L, -2, "setFrequency");
			lua_pushcfunction(L, AudioModule_setVolume, "setVolume");
			lua_setfield(L, -2, "setVolume");
			lua_pushcfunction(L, AudioModule_setEcho, "setEcho");
			lua_setfield(L, -2, "setEcho");
			lua_pop(L, 1);
		}
		{
			lua_newtable(L);
			lua_getglobal(L, "LumixModules");
			lua_pushvalue(L, -2);
			lua_setfield(L, -2, "gui");
			lua_pop(L, 1);
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			lua_pushcfunction(L, lua_new_module, "new");
			lua_setfield(L, -2, "new");
			lua_pushcfunction(L, GUIModule_getRectAt, "getRectAt");
			lua_setfield(L, -2, "getRectAt");
			lua_pushcfunction(L, GUIModule_isOver, "isOver");
			lua_setfield(L, -2, "isOver");
			lua_pushcfunction(L, GUIModule_getSystemPtr, "getSystemPtr");
			lua_setfield(L, -2, "getSystem");
			lua_pop(L, 1);
		}
		{
			lua_newtable(L);
			lua_getglobal(L, "LumixModules");
			lua_pushvalue(L, -2);
			lua_setfield(L, -2, "physics");
			lua_pop(L, 1);
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			lua_pushcfunction(L, lua_new_module, "new");
			lua_setfield(L, -2, "new");
			lua_pushcfunction(L, PhysicsModule_raycast, "raycast");
			lua_setfield(L, -2, "raycast");
			lua_pushcfunction(L, PhysicsModule_setGravity, "setGravity");
			lua_setfield(L, -2, "setGravity");
			lua_pop(L, 1);
		}
		{
			lua_newtable(L);
			lua_getglobal(L, "LumixModules");
			lua_pushvalue(L, -2);
			lua_setfield(L, -2, "renderer");
			lua_pop(L, 1);
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			lua_pushcfunction(L, lua_new_module, "new");
			lua_setfield(L, -2, "new");
			lua_pushcfunction(L, RenderModule_castRay, "castRay");
			lua_setfield(L, -2, "castRay");
			lua_pushcfunction(L, RenderModule_castRayTerrain, "castRayTerrain");
			lua_setfield(L, -2, "castRayTerrain");
			lua_pushcfunction(L, RenderModule_addDebugTriangle, "addDebugTriangle");
			lua_setfield(L, -2, "addDebugTriangle");
			lua_pushcfunction(L, RenderModule_addDebugLine, "addDebugLine");
			lua_setfield(L, -2, "addDebugLine");
			lua_pushcfunction(L, RenderModule_addDebugCross, "addDebugCross");
			lua_setfield(L, -2, "addDebugCross");
			lua_pushcfunction(L, RenderModule_addDebugBone, "addDebugBone");
			lua_setfield(L, -2, "addDebugBone");
			lua_pushcfunction(L, RenderModule_addDebugCube, "addDebugCube");
			lua_setfield(L, -2, "addDebugCube");
			lua_pushcfunction(L, RenderModule_addDebugCubeSolid, "addDebugCubeSolid");
			lua_setfield(L, -2, "addDebugCubeSolid");
			lua_pushcfunction(L, RenderModule_setActiveCamera, "setActiveCamera");
			lua_setfield(L, -2, "setActiveCamera");
			lua_pushcfunction(L, RenderModule_setActiveEnvironment, "setActiveEnvironment");
			lua_setfield(L, -2, "setActiveEnvironment");
			lua_pop(L, 1);
		}
		{
			lua_getglobal(L, "LumixAPI");
			lua_newtable(L);
			lua_pushvalue(L, -1);
			lua_setfield(L, -3, "AssetBrowser");
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			{
				auto proxy = [](lua_State* L) -> int {
					LuaWrapper::checkTableArg(L, 1); // self
					AssetBrowser* obj;
					if (!LuaWrapper::checkField(L, 1, "_value", &obj)) luaL_error(L, "Invalid object");
					auto resource = LuaWrapper::checkArg<Path>(L, 2);
					obj->openEditor(resource);
					return 0;
				};
				const char* name = "openEditor";
				lua_pushcfunction(L, proxy, name);
				lua_setfield(L, -2, name);
			}
			lua_pop(L, 2);
		}
		{
			lua_getglobal(L, "LumixAPI");
			lua_newtable(L);
			lua_pushvalue(L, -1);
			lua_setfield(L, -3, "GUISystem");
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			{
				auto proxy = [](lua_State* L) -> int {
					LuaWrapper::checkTableArg(L, 1); // self
					GUISystem* obj;
					if (!LuaWrapper::checkField(L, 1, "_value", &obj)) luaL_error(L, "Invalid object");
					auto enable = LuaWrapper::checkArg<bool>(L, 2);
					obj->enableCursor(enable);
					return 0;
				};
				const char* name = "enableCursor";
				lua_pushcfunction(L, proxy, name);
				lua_setfield(L, -2, name);
			}
			lua_pop(L, 2);
		}
		{
			lua_getglobal(L, "LumixAPI");
			lua_newtable(L);
			lua_pushvalue(L, -1);
			lua_setfield(L, -3, "SceneView");
			lua_pushvalue(L, -1);
			lua_setfield(L, -2, "__index");
			lua_pop(L, 2);
		}
		registerLuaComponent(L, "property_animator", property_animator_getter, property_animator_setter);
		registerLuaComponent(L, "animator", animator_getter, animator_setter);
		registerLuaComponent(L, "animable", animable_getter, animable_setter);
		registerLuaComponent(L, "echo_zone", echo_zone_getter, echo_zone_setter);
		registerLuaComponent(L, "chorus_zone", chorus_zone_getter, chorus_zone_setter);
		registerLuaComponent(L, "audio_listener", audio_listener_getter, audio_listener_setter);
		registerLuaComponent(L, "ambient_sound", ambient_sound_getter, ambient_sound_setter);
		registerLuaComponent(L, "spline", spline_getter, spline_setter);
		registerLuaComponent(L, "signal", signal_getter, signal_setter);
		registerLuaComponent(L, "gui_canvas", gui_canvas_getter, gui_canvas_setter);
		registerLuaComponent(L, "gui_render_target", gui_render_target_getter, gui_render_target_setter);
		registerLuaComponent(L, "gui_input_field", gui_input_field_getter, gui_input_field_setter);
		registerLuaComponent(L, "gui_rect", gui_rect_getter, gui_rect_setter);
		registerLuaComponent(L, "gui_button", gui_button_getter, gui_button_setter);
		registerLuaComponent(L, "gui_image", gui_image_getter, gui_image_setter);
		registerLuaComponent(L, "gui_text", gui_text_getter, gui_text_setter);
		registerLuaComponent(L, "lua_script", lua_script_getter, lua_script_setter);
		registerLuaComponent(L, "lua_script_inline", lua_script_inline_getter, lua_script_inline_setter);
		registerLuaComponent(L, "navmesh_zone", navmesh_zone_getter, navmesh_zone_setter);
		registerLuaComponent(L, "navmesh_agent", navmesh_agent_getter, navmesh_agent_setter);
		registerLuaComponent(L, "physical_heightfield", physical_heightfield_getter, physical_heightfield_setter);
		registerLuaComponent(L, "d6_joint", d6_joint_getter, d6_joint_setter);
		registerLuaComponent(L, "distance_joint", distance_joint_getter, distance_joint_setter);
		registerLuaComponent(L, "hinge_joint", hinge_joint_getter, hinge_joint_setter);
		registerLuaComponent(L, "spherical_joint", spherical_joint_getter, spherical_joint_setter);
		registerLuaComponent(L, "physical_controller", physical_controller_getter, physical_controller_setter);
		registerLuaComponent(L, "rigid_actor", rigid_actor_getter, rigid_actor_setter);
		registerLuaComponent(L, "wheel", wheel_getter, wheel_setter);
		registerLuaComponent(L, "vehicle", vehicle_getter, vehicle_setter);
		registerLuaComponent(L, "physical_instanced_cube", physical_instanced_cube_getter, physical_instanced_cube_setter);
		registerLuaComponent(L, "physical_instanced_mesh", physical_instanced_mesh_getter, physical_instanced_mesh_setter);
		registerLuaComponent(L, "camera", camera_getter, camera_setter);
		registerLuaComponent(L, "decal", decal_getter, decal_setter);
		registerLuaComponent(L, "environment", environment_getter, environment_setter);
		registerLuaComponent(L, "point_light", point_light_getter, point_light_setter);
		registerLuaComponent(L, "reflection_probe", reflection_probe_getter, reflection_probe_setter);
		registerLuaComponent(L, "environment_probe", environment_probe_getter, environment_probe_setter);
		registerLuaComponent(L, "bone_attachment", bone_attachment_getter, bone_attachment_setter);
		registerLuaComponent(L, "particle_emitter", particle_emitter_getter, particle_emitter_setter);
		registerLuaComponent(L, "instanced_model", instanced_model_getter, instanced_model_setter);
		registerLuaComponent(L, "model_instance", model_instance_getter, model_instance_setter);
		registerLuaComponent(L, "curve_decal", curve_decal_getter, curve_decal_setter);
		registerLuaComponent(L, "terrain", terrain_getter, terrain_setter);
		registerLuaComponent(L, "procedural_geom", procedural_geom_getter, procedural_geom_setter);
	}
}

