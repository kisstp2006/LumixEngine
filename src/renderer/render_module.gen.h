// Generated by meta.cpp

reflection::build_module("renderer")
	.function<(RayCastModelHit (RenderModule::*)(const Ray& ray, EntityPtr ignore))&RenderModule::castRay>("castRay")
	.function<(RayCastModelHit (RenderModule::*)(const Ray& ray))&RenderModule::castRayTerrain>("castRayTerrain")
	.function<(void (RenderModule::*)(const DVec3& p0, const DVec3& p1, const DVec3& p2, Color color))&RenderModule::addDebugTriangle>("addDebugTriangle")
	.function<(void (RenderModule::*)(DVec3 from, DVec3 to, Color color))&RenderModule::addDebugLine>("addDebugLine")
	.function<(void (RenderModule::*)(DVec3 center, float size, Color color))&RenderModule::addDebugCross>("addDebugCross")
	.function<(void (RenderModule::*)(DVec3 pos, Vec3 dir, Vec3 up, Vec3 right, Color color))&RenderModule::addDebugBone>("addDebugBone")
	.function<(void (RenderModule::*)(DVec3 pos, Vec3 dir, Vec3 up, Vec3 right, Color color))&RenderModule::addDebugCube>("addDebugCube")
	.function<(void (RenderModule::*)(DVec3 from, DVec3 max, Color color))&RenderModule::addDebugCubeSolid>("addDebugCubeSolid")
	.function<(void (RenderModule::*)(EntityRef camera))&RenderModule::setActiveCamera>("setActiveCamera")
	.function<(void (RenderModule::*)(EntityRef entity))&RenderModule::setActiveEnvironment>("setActiveEnvironment")
	.cmp<&RenderModule::createCamera, &RenderModule::destroyCamera>("camera", "Render / Camera")
		.icon(ICON_FA_CAMERA)
		.function<(Ray (RenderModule::*)(EntityRef entity, const Vec2& screen_pos))&RenderModule::getCameraRay>("getRay")
		.var_prop<&RenderModule::getCamera, &Camera::fov>("Fov")
			.radiansAttribute()
		.var_prop<&RenderModule::getCamera, &Camera::near>("Near")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::far>("Far")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::is_ortho>("Orthographic")
		.var_prop<&RenderModule::getCamera, &Camera::ortho_size>("Ortho size")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::film_grain_intensity>("Film grain intensity")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::dof_enabled>("Dof enabled")
		.var_prop<&RenderModule::getCamera, &Camera::dof_distance>("Dof distance")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::dof_range>("Dof range")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::dof_max_blur_size>("Dof max blur size")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::dof_sharp_range>("Dof sharp range")
			.minAttribute(0)
		.var_prop<&RenderModule::getCamera, &Camera::bloom_enabled>("Bloom enabled")
		.var_prop<&RenderModule::getCamera, &Camera::bloom_tonemap_enabled>("Bloom tonemap enabled")
		.var_prop<&RenderModule::getCamera, &Camera::bloom_accomodation_speed>("Bloom accomodation speed")
		.var_prop<&RenderModule::getCamera, &Camera::bloom_avg_bloom_multiplier>("Bloom avg bloom multiplier")
		.var_prop<&RenderModule::getCamera, &Camera::bloom_exposure>("Bloom exposure")
	.cmp<&RenderModule::createDecal, &RenderModule::destroyDecal>("decal", "Render / Decal")
		.var_prop<&RenderModule::getDecal, &Decal::uv_scale>("Uv scale")
			.minAttribute(0)
		.prop<&RenderModule::getDecalMaterialPath, &RenderModule::setDecalMaterialPath>("Material")
			.resourceAttribute(Material::TYPE)
		.prop<&RenderModule::getDecalHalfExtents, &RenderModule::setDecalHalfExtents>("Half extents")
			.minAttribute(0)
	.cmp<&RenderModule::createEnvironment, &RenderModule::destroyEnvironment>("environment", "Render / Environment")
		.icon(ICON_FA_GLOBE)
		.var_prop<&RenderModule::getEnvironment, &Environment::light_color>("Light color")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::direct_intensity>("Direct intensity")
			.minAttribute(0)
		.var_prop<&RenderModule::getEnvironment, &Environment::indirect_intensity>("Indirect intensity")
			.minAttribute(0)
		.var_prop<&RenderModule::getEnvironment, &Environment::sky_intensity>("Sky intensity")
		.var_prop<&RenderModule::getEnvironment, &Environment::scatter_rayleigh>("Scatter rayleigh")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::scatter_mie>("Scatter mie")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::absorb_mie>("Absorb mie")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::sunlight_color>("Sunlight color")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::fog_scattering>("Fog scattering")
			.colorAttribute()
		.var_prop<&RenderModule::getEnvironment, &Environment::fog_density>("Fog density")
		.var_prop<&RenderModule::getEnvironment, &Environment::sunlight_strength>("Sunlight strength")
		.var_prop<&RenderModule::getEnvironment, &Environment::height_distribution_rayleigh>("Height distribution rayleigh")
		.var_prop<&RenderModule::getEnvironment, &Environment::height_distribution_mie>("Height distribution mie")
		.var_prop<&RenderModule::getEnvironment, &Environment::ground_r>("Ground radius")
			.minAttribute(0)
		.var_prop<&RenderModule::getEnvironment, &Environment::atmo_r>("Atmosphere radius")
			.minAttribute(0)
		.var_prop<&RenderModule::getEnvironment, &Environment::fog_top>("Fog top")
		.var_prop<&RenderModule::getEnvironment, &Environment::godrays_enabled>("Godrays enabled")
		.var_prop<&RenderModule::getEnvironment, &Environment::atmo_enabled>("Atmo enabled")
		.var_prop<&RenderModule::getEnvironment, &Environment::clouds_enabled>("Clouds enabled")
		.var_prop<&RenderModule::getEnvironment, &Environment::clouds_top>("Clouds top")
		.var_prop<&RenderModule::getEnvironment, &Environment::clouds_bottom>("Clouds bottom")
		.prop<&RenderModule::getEnvironmentCastShadows, &RenderModule::setEnvironmentCastShadows>("Cast shadows")
		.prop<&RenderModule::getEnvironmentSkyTexture, &RenderModule::setEnvironmentSkyTexture>("Sky texture")
			.resourceAttribute(Texture::TYPE)
		.prop<&RenderModule::getEnvironmentShadowmapCascades, &RenderModule::setEnvironmentShadowmapCascades>("Shadowmap cascades")
	.cmp<&RenderModule::createPointLight, &RenderModule::destroyPointLight>("point_light", "Render / Point light")
		.icon(ICON_FA_LIGHTBULB)
		.var_prop<&RenderModule::getPointLight, &PointLight::color>("Color")
			.colorAttribute()
		.var_prop<&RenderModule::getPointLight, &PointLight::intensity>("Intensity")
			.minAttribute(0)
		.var_prop<&RenderModule::getPointLight, &PointLight::fov>("Fov")
			.radiansAttribute()
			.minAttribute(0)
			.clampAttribute(0, 360)
		.var_prop<&RenderModule::getPointLight, &PointLight::attenuation_param>("Attenuation param")
			.minAttribute(0)
			.clampAttribute(0, 100)
		.prop<&RenderModule::getPointLightRange, &RenderModule::setPointLightRange>("Range")
			.minAttribute(0)
		.prop<&RenderModule::getPointLightCastShadows, &RenderModule::setPointLightCastShadows>("Cast shadows")
		.prop<&RenderModule::getPointLightDynamic, &RenderModule::setPointLightDynamic>("Dynamic")
	.cmp<&RenderModule::createReflectionProbe, &RenderModule::destroyReflectionProbe>("reflection_probe", "Render / Reflection probe")
		.var_prop<&RenderModule::getReflectionProbe, &ReflectionProbe::size>("Size")
		.var_prop<&RenderModule::getReflectionProbe, &ReflectionProbe::half_extents>("Half extents")
		.prop<&RenderModule::isReflectionProbeEnabled, &RenderModule::enableReflectionProbe>("Enabled")
	.cmp<&RenderModule::createEnvironmentProbe, &RenderModule::destroyEnvironmentProbe>("environment_probe", "Render / Environment probe")
		.var_prop<&RenderModule::getEnvironmentProbe, &EnvironmentProbe::inner_range>("Inner range")
		.var_prop<&RenderModule::getEnvironmentProbe, &EnvironmentProbe::outer_range>("Outer range")
		.prop<&RenderModule::isEnvironmentProbeEnabled, &RenderModule::enableEnvironmentProbe>("Enabled")
	.cmp<&RenderModule::createBoneAttachment, &RenderModule::destroyBoneAttachment>("bone_attachment", "Render / Bone attachment")
		.icon(ICON_FA_BONE)
		.function<(void (RenderModule::*)(EntityRef entity, Quat rot))&RenderModule::setBoneAttachmentRotationQuat>("setRotation")
		.prop<&RenderModule::getBoneAttachmentParent, &RenderModule::setBoneAttachmentParent>("Parent")
		.prop<&RenderModule::getBoneAttachmentBone, &RenderModule::setBoneAttachmentBone>("Bone")
			.attribute<BoneEnum>()
		.prop<&RenderModule::getBoneAttachmentPosition, &RenderModule::setBoneAttachmentPosition>("Relative position")
		.prop<&RenderModule::getBoneAttachmentRotation, &RenderModule::setBoneAttachmentRotation>("Relative rotation")
			.radiansAttribute()
	.cmp<&RenderModule::createParticleEmitter, &RenderModule::destroyParticleEmitter>("particle_emitter", "Render / Particle emitter")
		.prop<&RenderModule::getParticleEmitterPath, &RenderModule::setParticleEmitterPath>("Source")
			.resourceAttribute(ParticleSystemResource::TYPE)
		.prop<&RenderModule::getParticleEmitterAutodestroy, &RenderModule::setParticleEmitterAutodestroy>("Autodestroy")
	.cmp<&RenderModule::createInstancedModel, &RenderModule::destroyInstancedModel>("instanced_model", "Render / Instanced model")
		.prop<&RenderModule::getInstancedModelPath, &RenderModule::setInstancedModelPath>("Model")
			.resourceAttribute(Model::TYPE)
		.blob_property<&RenderModule::getInstancedModelBlob, &RenderModule::setInstancedModelBlob>("Blob")
	.cmp<&RenderModule::createModelInstance, &RenderModule::destroyModelInstance>("model_instance", "Render / Mesh")
		.function<(bool (RenderModule::*)(EntityRef entity, u32 mesh_index, const char* uniform_name, Vec4 value))&RenderModule::overrideMaterialVec4>("overrideMaterialVec4")
		.function<(Model* (RenderModule::*)(EntityRef entity))&RenderModule::getModelInstanceModel>("getModel")
		.prop<&RenderModule::isModelInstanceEnabled, &RenderModule::enableModelInstance>("Enabled")
		.prop<&RenderModule::getModelInstancePath, &RenderModule::setModelInstancePath>("Source")
			.resourceAttribute(Model::TYPE)
	.cmp<&RenderModule::createCurveDecal, &RenderModule::destroyCurveDecal>("curve_decal", "Render / Curve decal")
		.prop<&RenderModule::getCurveDecalMaterialPath, &RenderModule::setCurveDecalMaterialPath>("Material")
			.resourceAttribute(Material::TYPE)
		.prop<&RenderModule::getCurveDecalHalfExtents, &RenderModule::setCurveDecalHalfExtents>("Half extents")
			.minAttribute(0)
		.prop<&RenderModule::getCurveDecalUVScale, &RenderModule::setCurveDecalUVScale>("UV scale")
			.minAttribute(0)
		.prop<&RenderModule::getCurveDecalBezierP0, &RenderModule::setCurveDecalBezierP0>("Bezier p0")
			.noUIAttribute()
		.prop<&RenderModule::getCurveDecalBezierP2, &RenderModule::setCurveDecalBezierP2>("Bezier p2")
			.noUIAttribute()
	.cmp<&RenderModule::createTerrain, &RenderModule::destroyTerrain>("terrain", "Render / Terrain")
		.function<(float (RenderModule::*)(EntityRef entity, float x, float z))&RenderModule::getTerrainHeightAt>("getHeightAt")
		.function<(Vec3 (RenderModule::*)(EntityRef entity, float x, float z))&RenderModule::getTerrainNormalAt>("getNormalAt")
		.prop<&RenderModule::getTerrainSize>("Size")
		.prop<&RenderModule::getTerrainMaterialPath, &RenderModule::setTerrainMaterialPath>("Material")
			.resourceAttribute(Material::TYPE)
		.prop<&RenderModule::getTerrainXZScale, &RenderModule::setTerrainXZScale>("XZ scale")
			.minAttribute(0)
		.prop<&RenderModule::getTerrainTesselation, &RenderModule::setTerrainTesselation>("Tesselation")
			.minAttribute(1)
		.prop<&RenderModule::getTerrainBaseGridResolution, &RenderModule::setTerrainBaseGridResolution>("Base grid resolution")
			.minAttribute(0)
		.prop<&RenderModule::getTerrainYScale, &RenderModule::setTerrainYScale>("Y scale")
			.minAttribute(0)
		.begin_array<&RenderModule::getGrassCount, &RenderModule::addGrass, &RenderModule::removeGrass>("grass")
		.prop<&RenderModule::getGrassRotationMode, &RenderModule::setGrassRotationMode>("Rotation mode")
			.attribute<GrassRotationModeEnum>()
		.prop<&RenderModule::getGrassDistance, &RenderModule::setGrassDistance>("Distance")
			.minAttribute(1)
		.prop<&RenderModule::getGrassPath, &RenderModule::setGrassPath>("Mesh")
			.resourceAttribute(Model::TYPE)
		.prop<&RenderModule::getGrassSpacing, &RenderModule::setGrassSpacing>("Spacing")
		.end_array()
	.cmp<&RenderModule::createProceduralGeometry, &RenderModule::destroyProceduralGeometry>("procedural_geom", "Render / Procedural geometry")
		.prop<&RenderModule::getProceduralGeometryMaterial, &RenderModule::setProceduralGeometryMaterial>("Material")
			.resourceAttribute(Material::TYPE)
;

